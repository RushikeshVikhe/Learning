NodePort Service Practical:
Check labels should be same

deployement yaml:

apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployement
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: httpd-container
        image: nginx:alpine
        ports:
        - containerPort: 80
		
		
service yaml:

apiVersion: v1
kind: Service
metadata:
  name: my-service
spec:
  type: NodePort
  selector:
    app: nginx
  ports:
    - port: 80
      targetPort: 80
      nodePort: 30007
	  
	  
kubectl apply -f deployment.yaml
kubectl apply -f service.yaml
kubectl get pods
kubectl get deployment
kubectl get service
If we are use minikube then we have to use minikube ip that is of node ip
minikube ip
minikube service service-name --url
curl -L http://192.168.49.2:30007




But if you are using eks cluster then :
first on all nodes enable the port that you are using in nodeport serive in inbound rules

then

root@ip-172-31-10-64:/home/ubuntu# kubectl get pods -o wide
NAME                                 READY   STATUS    RESTARTS   AGE    IP              NODE                                           NOMINATED NODE   READINESS GATES
nginx-deployement-79b546564c-z76ds   1/1     Running   0          115m   192.168.31.25   ip-192-168-21-42.ap-south-1.compute.internal   <none>           <none>

root@ip-172-31-10-64:/home/ubuntu# kubectl get nodes -o wide
NAME                                            STATUS   ROLES    AGE    VERSION               INTERNAL-IP      EXTERNAL-IP    OS-IMAGE         KERNEL-VERSION                  CONTAINER-RUNTIME
ip-192-168-21-42.ap-south-1.compute.internal    Ready    <none>   124m   v1.27.9-eks-5e0fdde   192.168.21.42    65.2.140.24    Amazon Linux 2   5.10.209-198.812.amzn2.x86_64   containerd://1.7.11
root@ip-172-31-10-64:/home/ubuntu# 

Use - curl -L 65.2.140.24:30007   ...i.e- curl -L external-ip:nodeport
